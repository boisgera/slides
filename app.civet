"civet autoLet react"
import React, { useEffect, useRef, useState, StrictMode } from "react"
import ReactDOM from 'react-dom/client';
import { motion, MotionStyle } from 'motion/react'
import { createUseStyles } from 'react-jss'
import Markdown from 'react-markdown'
import remarkMath from 'remark-math'
// import rehypeMathjax from 'rehype-mathjax'  
import { MathJaxContext, MathJax } from 'better-react-mathjax'
import { createHighlighter } from 'shiki'
import { Canvas, useFrame } from '@react-three/fiber';


r := String.raw

useStyles := createUseStyles
    "slide":
        // overflow: "hidden"
        margin: "0rem"
        padding: "3rem"
        height: "100vh"
        width: "100vw"
        background: "white"

export Hero1 : React.FC<any> := => 
    classes := useStyles()
    style :=
        fontSize: "96px"
        fontWeight: "700"
        lineHeight: "1" 
        width: "100vw"
        height: "100vh"
        display: "flex"
        alignItems: "center"
        // textAlign: "center"
    <motion.div 
        {style} 
        initial={scale:0.2} 
        animate={scale:1}>
        <h1>{"The Inter Typeface"}</h1>

export Hero2 : React.FC<any> := => 
    classes := useStyles()
    style :=
        fontSize: "72px"
        fontWeight: "700"
        lineHeight: "1" 
        width: "100vw"
        height: "100vh"
        display: "flex"
        alignItems: "center"
        justifyContent: "center"
    <div {style}>
        <motion.h1 
            whileHover={ scale: 0.9 } 
            style={
                textAlign: "center", 
                display: "block"
            }>
            <span>{"Don't just read it;"}</span>
            <br></br> 
            <span>{"Fight it!"}</span>

export Zlide : React.FC<any> := => 
    classes := useStyles()
    style :=
        fontSize: "96px"
        fontWeight: "700"
        lineHeight: "1" 
        marginBottom: "0.5em"
    <div .{classes.slide} >
        <h1 {style}>{"The Inter Typeface"}</h1>
        <p>{"""
        Inter is one of the world's most used typefaces 
        with applications ranging from computer interfaces, 
        advertising & airports, 
        to NASA instrumentation & medical equipment
        """}

type NumberStateHook = [number, React.Dispatch<React.SetStateAction<number>>]

useFragmentState := (initialIndex = 0) : NumberStateHook =>
    // Parse the current URL fragment to get the initial index
    getIndexFromFragment := =>
        fragment := window.location.hash.replace("#", "");
        if fragment then parseInt(fragment, 10) else initialIndex

    [index, setIndex] := useState getIndexFromFragment()

    // Update the URL fragment whenever the index changes
    useEffect
        => window.location.hash = index.toString();
        [index]

    // Listen for changes to the URL fragment (e.g., back/forward navigation)
    useEffect 
        => 
            handleHashChange := =>
                newIndex := getIndexFromFragment()
                if newIndex is not index
                    setIndex newIndex;
            window.addEventListener "hashchange", handleHashChange
            => window.removeEventListener "hashchange", handleHashChange;
        [index]

    [index, setIndex]


export Deck : React.FC<any> := ({children}) =>
    [index, setIndex] := useFragmentState 0

    useEffect 
        =>
            onKeyDown := (event) =>
                if event.key is "ArrowRight"
                    setIndex (index) => 
                        Math.min index + 1, children.length - 1
                if event.key is "ArrowLeft"
                    setIndex (index) => 
                        Math.max index - 1, 0
            onKeyDown |> document.addEventListener "keydown", .
            // onClick := (event) => 
            //     setIndex (index) => (index + 1) % children.length // TODO: deal with length dependency
            // onClick |> document.addEventListener "click", .
            // register cleanup function
            => 
                onKeyDown |> document.removeEventListener "keydown", .
                // onClick |> document.removeEventListener "click", . 

        [] // runs only once on mount

    children[index]


useTCStyles := createUseStyles 
    text: 
        backgroundClip: "text"
        WebkitBackgroundClip: "text"

export TwoColumnExample : React.FC<any> := =>
    classes := useTCStyles()
    <div>
        <header>
            <h2 style={textAlign: "center", fontSize: "72px"}>
                Two Column
                <span .{classes.text} style={
                    color: "transparent"
                    background: "linear-gradient(90deg, #ff7e5f, #feb47b, #ff6a00)"
                    backgroundClip: "text"
                    WebkitBackgroundClip: "text"
                    }> Layout </span>
                Example
        <div style={display: "flex"}>
            <div style={flex: 1, margin: "2em"}>
                <h2 style={fontSize: "60px"}>Lorem Ipsum
                <p style={"fontSize": "24px"}>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
            <div style={flex: 1, margin: "2em"}>
                <h2 style={fontSize: "60px"}>TODO List 
                <ul style={listStylePosition: "inside"}>
                    <p style={fontSize: "36px"}>
                        <li>Bread
                        <li>Milk
                        <li>Butter
                        <li>Cheese

export MdMathSlide : React.FC<any> := =>
    md := r"""
    ```math
    \int_0^\infty e^{-x^2} dx = \frac{\sqrt{\pi}}{2}
    ```
    """
    <p>
        <Markdown remarkPlugins={[remarkMath]}>
            {md}


export MdSlide : React.FC<any> := => // TODO: solve the double \ issue in Math?
    markdown := '''
    # Hi, Math!
    ```math
    I := \\int_0^{\\infty} e^{-x^2} dx = \\frac{\\sqrt{\\pi}}{2}
    ```

    '''
    <div style={fontSize: "72px"}>
        <Markdown 
            remarkPlugins={[remarkMath]}> 
            <!-- rehypePlugins={[rehypeMathjax]} -->
            {markdown}

export Unsplash : React.FC<any> := ({id="Y19hE9fAOG4", width=1920, children})=> 
    <div 
        style={
            width: "100vw",
            height: "100vh",
            backgroundImage: `url(https://unsplash.com/photos/${id}/download?force=true&w=${width})`,
            backgroundSize: "cover",
        }>
        {children}

export MathSlide1 : React.FC<any> := =>
    <MathJax>
        <div style={height: "100vh", display: "flex", justifyContent: "center", alignItems: "center"}>
            <p style={display: "inline-block", fontSize: "96px"}>
                {r`$$\int_0^{\infty} e^{-x^2} dx = \frac{\sqrt{\pi}}{2}$$`}

export MathSlide2 : React.FC<any> := =>
    <MathJax>
        <div style={height: "100vh", display: "flex", justifyContent: "center", alignItems: "center"}>
            <p style={display: "inline-block", fontSize: "96px"}>
                {r`$$\mathbb{E}[X] = \mathbb{E}\left[\mathbb{E}[X | Y]\right]$$`}



export CodeExample : React.FC<any> := =>
    code := ```
    function hello__() {
        console.log('Hello, world!');
    }
    const doIt = () => {
        hello__(); // Or don't !!!
    }
    ```
    html := highlighter.codeToHtml code, lang: "js", theme: "github-dark"
    <div 
        style={            
            display: "flex"
            alignItems: "center"
            justifyContent: "center"
            height: "100vh"
        }>
        <div 
            style={
                fontSize: "36px"
                padding: "1em"
                borderRadius: "0.25em"
                width: "fit-content"
                background: "github-dark" |> highlighter.getTheme |> .bg
            }>
            <div dangerouslySetInnerHTML={ __html: html }>

export Box := (props) =>
    mesh := useRef(null)
    [hovered, setHover] := useState false
    [active, setActive] := useState false
    useFrame (state, delta) => mesh.current.rotation.x += delta
    <mesh
        {...props}
        ref={mesh}
        scale={active ? 1.5 : 1}
        onClick={(event) => setActive not active}
        onPointerOver={(event) => setHover true}
        onPointerOut={(event) => setHover false}>
        <boxGeometry args={[1, 1, 1]} />
        <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />

export ThreeBox := =>
    <div style={width: '100vw', height: '100vh'}>
        <Canvas>
            <ambientLight intensity={Math.PI / 2} />
            <spotLight 
                position={[10, 10, 10]} 
                angle={0.15} 
                penumbra={1} 
                decay={0} 
                intensity={Math.PI} />
            <pointLight 
                position={[-10, -10, -10]} 
                decay={0} 
                intensity={Math.PI} />
            <Box position={[-1.2, 0, 0]} />
            <Box position={[1.2, 0, 0]} />

root := ReactDOM.createRoot document.body

highlighter = undefined

async function init()
    highlighter = await createHighlighter { themes: ["nord", "github-dark"], langs: ["js"] }
    console.log highlighter
    console.log (highlighter.getTheme "github-dark")
    root.render 
        <StrictMode>   
            <MathJaxContext>
                <Deck>
                    <ThreeBox />
                    <CodeExample />
                    <MathSlide1 />
                    <Unsplash id="EvKXANO8MGw">
                    <MathSlide2 />
                    <Unsplash>
                        <div style={
                            width: "100%", 
                            height: "100vh",
                            display: "flex"
                            alignItems: "center",
                            justifyContent: "center"}>
                            <h1 style={
                                fontSize: "96px",
                                fontWeight: "700",
                                lineHeight: "1",
                                color: "white",
                                textShadow: "0 0 10px rgba(0,0,0,0.5)"
                            }>{"Le Mont Saint-Michel"}
                    <Unsplash id="sk3BZ5HsYTI" />
                    <!-- <MdSlide /> -->
                    <TwoColumnExample />
                    <Hero1 />
                    <Hero2 />
                    <Zlide />

init()